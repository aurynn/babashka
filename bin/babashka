#!/bin/bash

__babashka_trace=no
__babashka_output_stream=/dev/null

__babashka_usage() {
    echo "usage: babashka [-v] [-s] [-f] [-x] <dep name>" >&2
    echo "  -s : use sudo if required"               >&2
    echo "  -f : force operations"                   >&2
    echo "  -x : trace mode (debug)"                 >&2
    echo "  -v : verbose mode"                       >&2
    exit 1
}

while getopts "vfxsd:" opt; do
    case $opt in
        x)
            __babashka_trace=yes
            ;;
        s)
        # TODO:
        # Hardcode the sudo path, since this is potentially a bit dicey
            __babashka_sudo="sudo"
            ;;
        f)
            __babushka_force="yes"
            ;;
        d)
            # Set a custom directory to also source in
            __babashka_directory=$(echo $OPTARG | xargs)
            ;;
        v)
            __babashka_output_stream="/dev/stderr"
            ;;
        \?)
            __babashka_usage
            ;;
    esac
done

((shift_value = $OPTIND - 1))
shift $shift_value
unset OPTIND

if [ $__babashka_trace = "yes" ]; then
    set -x
fi

__babashka_log() {
    printf "%*s"  "$__babashka_current_indent" 1>&2
    printf "%s\n" "$@" 1>&2
}

__babashka_fail() {
    echo ERROR: "$@" 1>&2
    exit 1
}

unmeetable() {
    __babashka_fail "$@"
}
function process() {
    if ! process_is_met; then
        process_meet
        process_is_met || __babashka_fail "dependency didn't converge"
    fi
}

function process_is_met() {
    __babashka_log '`- is met?'
    is_met > $__babashka_output_stream
    st=$?
    __babashka_log "  $st"
    return $st
}

function process_meet() {
    __babashka_log "=> meet "
    meet > $__babashka_output_stream
    st=$?
    __babashka_log "=> $st"
}

function requires() {
    __babashka_invoke "$1"
}

function requires_nested() {
    ( __babashka_invoke "$1" ) || exit 1
}

# $1 - dep name to invoke
function __babashka_invoke() {
    (( __babashka_current_indent = __babashka_current_indent + 1 ))
    __babashka_log "-> $1"
    eval "$1"

    # that makes the return code 1 even if babashka succeeds, because arithmetic
    # expressions behave differently than success/error of commands:
    # http://wiki.bash-hackers.org/syntax/arith_expr#truth
    #
    # so force it to succeed with || true, we don't want the increment/decrement
    # to alter the exit code anyway (will still return exit 1 if babashka
    # failed to converge).
    (( __babashka_current_indent = __babashka_current_indent - 1 )) || true
}
function __babashka_load_deps() {
    # Rename directories to be a bit more clear what they're for
    # Include a system-level Babashka repository for common packages and stuff
    for path in babashka/ babashka/dependencies/ /etc/babashka/dependencies /etc/babashka/helpers ${__babashka_directory:+$__babashka_directory}; do
        if [ -d $path ]; then
            __babashka_load_deps_from_path "$path"
        fi
    done
}

# $1 - path to search over
# [$2] - pattern to match for deps
function __babashka_find_deps_from_path() {
    # Use -L to follow links
    # So we're looking for a special file, the "don't recurse" file, to keep
    # Babashka from walking the whole tree to look for shell files to load.
    # We also want to skip any directories named "files", since that's the default
    # location for files being used by configuration management to live.
    if [ $(basename "$1") = "files" ] && -d $1; then 
        # Skip this, because it's likely a files directory and shouldn't be 
        # scanned
        return
    fi
    if [ $(basename "$1") = ".git" ] && -d $1; then 
        # Don't scan git directories, obviously
        return
    fi
    if [ -e "$1/.babashka_no_recurse" ]; then
        find -L "$1" -maxdepth 1 -type f -iname "*.${2:-sh}" 
    else
        find -L "$1" -type f -iname "*.${2:-sh}"
    fi
}

# $1 - path to load deps from
function __babashka_load_deps_from_path() {
    for path in $(__babashka_find_deps_from_path "$1"); do
        source $path
    done
}
file_exists() {
    if [ "${1:0:7}" = "hdfs://" ]; then
        hadoop fs -test -e "$1"
    else
        test -f "$1"
    fi
}

dir_exists() {
    if [ "${1:0:7}" = "hdfs://" ]; then
        hadoop fs -test -d "$1"
    else
        test -f "$1"
    fi
}

file_mtime() {
    if [ "${1:0:7}" = "hdfs://" ]; then
        echo $(( $(hadoop fs -stat %Y "$1") / 1000 ))
    else
        stat -c %Y "$1"
    fi
}

file_is_newer() {
    target_mtime=$(file_mtime "$1")
    shift
    for f in "$@"; do
        mtime=$(file_mtime "$f")
        if [ $mtime -gt $target_mtime ]; then
            return 1
        fi
    done
    return 0
}

function __babashka_main() {
    if [ $# -eq 1 ]; then
        __babashka_invoke "$1"
    else
        __babashka_usage
    fi
}

__babashka_load_deps

__babashka_main "$@"
